let defaultExcelConfig = {
    htvColumnMap: {
        htvDraft: 'Eng_Data *HTV DRAFT',
        hlvDraft: 'Eng_Data *HLV DRAFT',
        htvDistHlv: 'Eng_Data *HTV DIST HLV',
        psBoom: 'HLV_PS_Crane *PS BOOM',
        sbBoom: 'HLV_SB_Crane *SB BOOM',
        psSlew: 'HLV_PS_Crane *PS SLEW',
        sbSlew: 'HLV_SB_Crane *SB SLEW',
        htvPosInField: 'HTV Position In Field',
        htvX: 'HTV_X',
        htvY: 'HTV_Y',
        htvZ: 'HTV_Z',
        htvQX: 'HTV_QX',
        htvQY: 'HTV_QY',
        htvQZ: 'HTV_QZ',
        htvQW: 'HTV_QW',
        hlvX: 'HLV_X',
        hlvY: 'HLV_Y',
        hlvZ: 'HLV_Z',
        hlvQX: 'HLV_QX',
        hlvQY: 'HLV_QY',
        hlvQZ: 'HLV_QZ',
        hlvQW: 'HLV_QW',
        mpX: 'MP_X',
        mpY: 'MP_Y',
        mpZ: 'MP_Z',
        mpQX: 'MP_QX',
        mpQY: 'MP_QY',
        mpQZ: 'MP_QZ',
        mpQW: 'MP_QW',
        htvModel: 'HTV Model',
        hlvModel: 'HLV Model',
        subjectModel: 'SUBJECT Model',
        deckPos: 'Eng_Data *POS. HTV',
    },
    deckColumnMap: {
        htvDlQX: 'HTV_DL_QX',
        htvDlQY: 'HTV_DL_QY',
        htvDlQZ: 'HTV_DL_QZ',
        htvDlQW: 'HTV_DL_QW',
        htvDlX: 'HTV_DL_X',
        htvDlY: 'HTV_DL_Y',
        htvDlZ: 'HTV_DL_Z',
        deckPos: 'Position on HTV DeckLayout',
    },
    animations:
        {
            'Mesh009': ["mesh.rotation.y = cNum('sbSlew') / 180 * pi"],
            'Mesh001': ["mesh.rotation.y = cNum('psSlew') / 180 * pi"],
            'Mesh002': ["mesh.rotation.z = cNum('psBoom') / 180 * pi"],
            'Thialf--THIPMB': ["mesh.rotation.z = -cNum('psBoom') / 180 * pi"],
            'Thialf--THIPAB': ["mesh.rotation.z = -cNum('psBoom') / 180 * pi"],
            'Thialf--THIPWB': ["mesh.rotation.z = -cNum('psBoom') / 180 * pi"],
            'Mesh010': ["mesh.rotation.z = cNum('sbBoom') / 180 * pi"],
            'Thialf--THISMB': ["mesh.rotation.z = -cNum('sbBoom') / 180 * pi"],
            'Thialf--THISAB': ["mesh.rotation.z = -cNum('sbBoom') / 180 * pi"],
            'Thialf--THISWB': ["mesh.rotation.z = -cNum('sbBoom') / 180 * pi"],
        },
    htvScourInterpolation: "cGet('htvPosInField') === 'offset from e/n next pile' ? 1 : (cGet('htvPosInField') === 'offset from e/n cur pile' ? 0 : 0.5)",
    lerpPos: "(()=>{const v = v3.lerp(currMPPos, nextMPPos, calc('htvScourInterpolation')); v.y=0; return v;})()",
    derivedHtvDraft: "cGet('htvDraft') ? cNum('htvDraft') / 1000 : cNum('htvZ')",
    derivedHlvDraft: "cGet('hlvDraft') ?(cNum('hlvDraft') / 1000 + 26.6) :cNum('hlvZ')",
    htvLookRot: "q.mul(q.eul(0,-pi / 2,0),  q.look(v3.sub(currMPPos, nextMPPos), htv.up))",
    htvDataRot: "q.inv(q.new(cNum('htvQX'), cNum('htvQZ'), -cNum('htvQY'), cNum('htvQW')))",

    hlvObjectRot: "q.mul(q.eul(-pi, 0,-pi / 2), q.new(cNum('mpQX'), cNum('mpQY'), cNum('mpQZ'), cNum('mpQW')))",
    hlvObjectPos: "v3.new(cNum('mpX'), cNum('mpZ'), -cNum('mpY'))",
    htvObjectRot: "q.mul(q.new(dNum('htvDlQX'), dNum('htvDlQY'), dNum('htvDlQZ'), dNum('htvDlQW')), q.eul(0,0,pi/4))",
    htvObjectPos: "v3.new(dNum('htvDlX'), dNum('htvDlZ')+14, dNum('htvDlY'))",

    htvRot: "calc(cGet('htvPosInField') === 'interpolation' ? 'htvLookRot' : 'htvDataRot')",
    hlvRot: "q.inv(q.new(cNum('hlvQX'), cNum('hlvQZ'), -cNum('hlvQY'), cNum('hlvQW')))",
    htvPos: "v3.add(calc('lerpPos'), v3.new( cNum('htvX'), calc('derivedHtvDraft'), - cNum('htvY')))",
    hlvPos: "v3.new( currMPPos.x + cNum('hlvX'), calc('derivedHlvDraft'), currMPPos.z - cNum('hlvY'))",
};